#! /usr/bin/env ruby

require 'pg'

class ExpenseData

  def initialize
    # connect to the database
    @connection = PG.connect(dbname: 'expenses')
  end

  # show a list of expenses
  def list
    show_all = @connection.exec('SELECT * FROM expenses;')
    if show_all.ntuples > 0
      display_results(show_all)
    else
      puts "No expenses."
    end
  end

  # add an expense
  def add(amount, memo)
    # timestamp omitted because column defaults to NOW()
    @connection.exec_params("INSERT INTO expenses (amount, memo) VALUES ($1, $2);", [amount, memo])
  end

  # search for an expense by memo
  def search(keyword)
    # capitalize search keywords so SQL query is case-insensitive
    keyword = keyword.upcase
    search_results = @connection.exec_params("SELECT * FROM expenses WHERE UPPER(memo) ILIKE $1;", ["%#{keyword}%"])

    display_results(search_results)
  end

  def delete(id)
    # check for existence of an expense with specified id
    result = @connection.exec_params("SELECT * FROM expenses WHERE id = $1;", [id])
    if result.ntuples == 1
      @connection.exec_params("DELETE FROM expenses WHERE id = $1", [id])
      puts "The following expense was deleted:"
      display_results(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def clear
    @connection.exec("DELETE FROM expenses")
  end

  private

  def display_results(results)
    results.each do |row|
      columns = [row['id'].rjust(3), row['created_on'].rjust(30), row['amount'].rjust(6), row['memo']]
      puts columns.join(' | ')
    end
  end

end


class CLI

  def initialize
    @application = ExpenseData.new
  end

  # determine if the price value is greater than 0.00
  def is_valid_price?(price)
    price > 0.00
  end

  # show the help menu
  def help
    puts "An expense recording system"
    puts ""
    puts "Commands:"
    puts ""
    puts "add AMOUNT MEMO [DATE] - record a new expense"
    puts "clear - delete all expenses"
    puts "list - list all expenses"
    puts "delete NUMBER - remove expense with id NUMBER"
    puts "search QUERY - list expenses with a matching memo field"
  end

  # check arguments to script
  def run(args)
    command = args.shift
    case command
    when 'add'
      amount = args[0].to_f
      memo = args[1]
      abort 'Error: You must provide an amount and a memo.' unless is_valid_price?(amount) && memo
      @application.add(amount,memo)
    when 'search'
      search_terms = args[0]
      @application.search(search_terms)
    when 'list'
      @application.list
    when 'delete'
      id = args[0]
      @application.delete(id)
    when 'clear'
      puts "This will remove all expenses. Are you sure you'd like to continue? (y/n)"
      confirmation = gets.chomp
      if confirmation.downcase == 'y'
        @application.clear
        puts "All expenses have been deleted."
      end
    else
      help
    end
  end
end

CLI.new.run(ARGV)